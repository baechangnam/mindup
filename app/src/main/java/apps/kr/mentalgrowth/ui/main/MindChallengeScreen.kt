package apps.kr.mentalgrowth.ui.main

import android.content.Context
import android.util.Log
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.aspectRatio
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.Button
import androidx.compose.material.Card
import androidx.compose.material.Icon
import androidx.compose.material.IconButton
import androidx.compose.material.LocalTextStyle
import androidx.compose.material.MaterialTheme
import androidx.compose.material.Scaffold
import androidx.compose.material.Surface
import androidx.compose.material.Text
import androidx.compose.material.TopAppBar
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.AccountCircle
import androidx.compose.material.icons.filled.Favorite
import androidx.compose.material.icons.filled.Home
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.painter.Painter
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import apps.kr.mentalgrowth.R
import androidx.lifecycle.viewmodel.compose.viewModel
import apps.kr.mentalgrowth.common.CommonView.TitleWithHearts
import apps.kr.mentalgrowth.model.ApiResponseModel
import apps.kr.mentalgrowth.network.NetworkClient
import apps.kr.mentalgrowth.ui.main.viewmodel.MainViewModel
import coil.compose.AsyncImage

//import apps.kr.mentalgrowth.ui.main.viewmodel.GolfCourseListViewModel

@Composable
fun MindChallengeScreen( navController: NavController? = null,
                     viewModel: MainViewModel = viewModel()) {

    val boardList by viewModel.getBoardList.collectAsState()
    val boardVideoList by viewModel.getBoardVideo.collectAsState()
    val getBoardTitle by viewModel.getBoardTitle.collectAsState()
    val memberList by viewModel.memList.collectAsState()

    val nickName = LocalContext.current
        .getSharedPreferences("my_preferences", Context.MODE_PRIVATE)
        .getString("mem_nick", "ÎãâÎÑ§ÏûÑ")!!

    val class_group_id = LocalContext.current
        .getSharedPreferences("my_preferences", Context.MODE_PRIVATE)
        .getString("class_group_id", "")!!

    val mem_id = LocalContext.current
        .getSharedPreferences("my_preferences", Context.MODE_PRIVATE)
        .getString("mem_id", "")!!

    // ‚ë† ÏÑ†ÌÉùÎêú Í∏ÄÏûê ÏÉÅÌÉú
    var selectedLetter by remember { mutableStateOf<String?>(null) }

    // heartData Ïû¨ÏÇ¨Ïö©ÏùÑ ÏúÑÌï¥ Îî∞Î°ú Ï†ïÏùò
    val heartData = mapOf(
        "H" to listOf("ÎßàÏùå ÏùºÍ∏∞", "ÎßàÏùå Ïª¨Îü¨ÎßÅ"),
        "E" to listOf("ÎßàÏùå Î∏åÏù¥Î°úÍ∑∏", "ÎßàÏùå ÎπÑÌÉÄÎØº"),
        "A" to listOf("ÎßàÏùå ÏïΩÍµ≠", "ÎßàÏùå ÎßêÎûë"),
        "R" to listOf("1Ïùº 1Ïã¨", "ÎßàÏùå ÌûàÏñ¥Î°ú"),
        "T" to listOf("ÎßàÏùå ÌÖåÎùºÌîº", "ÎßàÏùå Îã§Ïù¥Ïñ¥Ìä∏")
    )

    LaunchedEffect(class_group_id) {
        viewModel.getBoardTouch("4", class_group_id,"",mem_id,"today")

    }

    val descriptions = listOf("ÏïåÏïÑÎ¥êÏöî", "Ï°∞Ï†àÌï¥Ïöî", "ÏÜåÌÜµÌï¥Ïöî", "Ìï®ÍªòÌï¥Ïöî", "Í±¥Í∞ïÌï¥Ïöî")

    Scaffold(
        topBar = {
            TopAppBar(
                backgroundColor = Color(0xFFF8BBD0),
            ) {
                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(56.dp), // Í∏∞Î≥∏ TopAppBar ÎÜíÏù¥
                    contentAlignment = Alignment.Center
                ) {
                    // ‚úÖ Ï§ëÏïô ÌÉÄÏù¥ÌãÄ (ÌïòÌä∏ Ìè¨Ìï®)
                    TitleWithHearts("ÎßàÏùåÏ±åÎ¶∞ÏßÄ")
                    // üîπ ÏôºÏ™Ω: Îí§Î°úÍ∞ÄÍ∏∞ Î≤ÑÌäº
                    Row(
                        modifier = Modifier.align(Alignment.CenterStart),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        IconButton(onClick = { navController?.popBackStack() }) {
                            Icon(
                                painter = painterResource(id = R.drawable.ic_back_black),
                                contentDescription = "Îí§Î°úÍ∞ÄÍ∏∞",
                                modifier = Modifier.size(40.dp)
                            )
                        }
                    }

                    // üîπ Ïò§Î•∏Ï™Ω: Ìôà Î≤ÑÌäº
                    Row(
                        modifier = Modifier.align(Alignment.CenterEnd),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        IconButton(onClick = {
                            navController?.navigate("home") {
                                popUpTo(navController.graph.startDestinationId) { inclusive = true }
                                launchSingleTop = true
                            }
                        }) {
                            Icon(
                                imageVector = Icons.Default.Home,
                                contentDescription = "ÌôàÏúºÎ°ú",
                                modifier = Modifier.size(24.dp)
                            )
                        }
                    }
                }
            }


        },

        content = { innerPadding ->
            Column(
                Modifier
                    .fillMaxSize()
                    .verticalScroll(rememberScrollState())
                    .padding(innerPadding)
                    .padding(16.dp)
            ) {
                Spacer(Modifier.height(24.dp))

                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .border(
                            width = 1.dp,
                            color = Color.LightGray,
                            shape = RoundedCornerShape(16.dp)
                        )
                        .padding(16.dp)
                ) {
                    Row(
                        verticalAlignment = Alignment.CenterVertically

                    ) {
                        Spacer(modifier = Modifier.width(10.dp)) // ÌïòÌä∏ÏôÄ ÌÖçÏä§Ìä∏ Í∞ÑÍ≤©
                        // Î∂ÑÌôç ÌïòÌä∏
                        Image(
                            painter = painterResource(id = R.drawable.challenge),
                            contentDescription = "Touch Icon",
                            modifier = Modifier.size(40.dp)
                        )

                        // 2. ÌÖçÏä§Ìä∏ Ïª¨Îüº
                        Column(
                            modifier = Modifier
                                .fillMaxWidth(),

                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            Row(
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text(
                                    text = "ÎßàÏùåÏ±åÎ¶∞ÏßÄ",
                                    fontSize = 15.sp,
                                    fontWeight = FontWeight.Bold,
                                    color = Color.White,
                                    modifier = Modifier
                                        .background(
                                            color = Color(0xFFFF6F91), // ÏßÑÌïú Î∂ÑÌôçÏÉâ
                                            shape = RoundedCornerShape(8.dp)
                                        )
                                        .padding(horizontal = 8.dp, vertical = 4.dp)
                                )
                                Spacer(modifier = Modifier.width(4.dp)) // ÎßàÏùåÌÑ∞ÏπòÏôÄ Î¨∏Ïû• ÏÇ¨Ïù¥ Í∞ÑÍ≤©
                                Text(
                                    text = "Îäî Ïä§Ïä§Î°ú Ïã§Ï≤úÌïòÍ≥†",
                                    fontSize = 13.sp,
                                    fontWeight = FontWeight.Normal,
                                    color = Color.Black
                                )
                            }
                            Spacer(modifier = Modifier.height(4.dp)) // ÏúÑ-ÏïÑÎûò Ï§Ñ Í∞ÑÍ≤©
                            Text(
                                text = "Í∏∞Î°ùÌïòÎäî Í≥µÍ∞ÑÏù¥ÏóêÏöî.",
                                fontSize = 13.sp,
                                fontWeight = FontWeight.Normal,
                                color = Color.Black
                            )
                        }
                    }

                }



                Spacer(Modifier.height(24.dp))

                HeartInfoTableC(
                    heartData = heartData,
                    selected = selectedLetter,
                    onSelect = { letter ->
                        selectedLetter = letter
                    }
                    , navController = navController,  boardList = boardList // Ï∂îÍ∞Ä
                )

                Spacer(modifier = Modifier.height(16.dp))

                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(end = 16.dp),
                    horizontalArrangement = Arrangement.End
                ) {
                    Button(
                        onClick = {
                            navController?.navigate("chalNote")
                        }
                    ) {
                        Text("ÏÑ±Ïû•ÎÖ∏Ìä∏")
                    }
                }



            }
        }
    )




}
@Composable
fun HeartInfoTableC(
    heartData: Map<String, List<String>>,
    selected: String?,
    onSelect: (String) -> Unit,
    navController: NavController?,
    boardList: List<ApiResponseModel.Board> = emptyList(),
    modifier: Modifier = Modifier
) {
    val lettersInOrder = listOf("H", "E", "A", "R", "T")
    val descriptions   = listOf("ÏïåÏïÑÎ¥êÏöî", "Ï°∞Ï†àÌï¥Ïöî", "ÏÜåÌÜµÌï¥Ïöî", "Ìï®ÍªòÌï¥Ïöî", "Í±¥Í∞ïÌï¥Ïöî")
    val perGroupCount  = heartData.values.firstOrNull()?.size ?: 2

    // ÌôúÏÑ±ÌôîÎêú board_category_idx ÏßëÌï©
    val activeCodes = remember(boardList) {
        boardList.mapNotNull { it.board_category_idx }.toSet()
    }

    Column(modifier = modifier.fillMaxWidth()) {
        Spacer(modifier = Modifier.height(5.dp))

        heartData.forEach { (letter, items) ->
            if (selected == null || selected == letter) {
                val letterIndex = lettersInOrder.indexOf(letter)

                // CAL001~ ÏùÑ ÎßåÎìúÎäî ÏòàÏãú Î°úÏßÅ
                val codesForLetter = (0 until perGroupCount).map { idx ->
                    "CAL" + String.format("%03d", letterIndex * perGroupCount + idx + 1)
                }
                val isAllActive = codesForLetter.all { it in activeCodes }

                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(vertical = 4.dp),  horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    // ‚îÄ‚îÄ‚îÄ ÏàòÏ†ïÎêú Î∂ÄÎ∂Ñ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
                    Box(
                        modifier = Modifier
                            .size(56.dp)
                            .clickable { onSelect(letter) },
                        contentAlignment = Alignment.Center
                    ) {
                        Icon(
                            imageVector = Icons.Default.Favorite,
                            contentDescription = null,
                            tint = if (selected == letter) Color(0xFFFFC0CB) else Color(0xFFEBEBEB),
                            modifier = Modifier.fillMaxSize()
                        )
                        Column(
                            horizontalAlignment = Alignment.CenterHorizontally,
                            verticalArrangement = Arrangement.Center,
                            modifier = Modifier.padding(4.dp)
                        ) {
                            Text(
                                text = letter,
                                fontSize = 20.sp,
                                fontWeight = FontWeight.Bold,
                                color = if (selected == letter) Color.Black else Color.DarkGray,
                                modifier = Modifier.padding(bottom = 1.dp)
                            )
                            Text(
                                text = descriptions[letterIndex],
                                fontSize = 10.sp,
                                color = if (selected == letter) Color.Black else Color.DarkGray,
                                textAlign = TextAlign.Center,
                                style = LocalTextStyle.current.copy(
                                    lineHeight = 10.sp,
                                    letterSpacing = (-0.5).sp
                                )
                            )
                        }
                    }
                    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

                    items.forEachIndexed { idx, text ->
                        val globalIndex = letterIndex * perGroupCount + idx
                        val code        = "CAL" + String.format("%03d", globalIndex + 1)

                        val bg = when {
                            code in activeCodes -> if (idx < 2) Color(0xFFEBD7F4) else Color(0xFFEBD7F4)
                            else                -> Color(0xFFE0E0E0)
                        }

                        Box(
                            modifier = Modifier
                                .weight(1f)
                                .padding(horizontal = 4.dp)
                                .background(bg, RoundedCornerShape(8.dp))
                                .clickable { navController?.navigate("chaDetail/$code/$text") }
                                .padding(vertical = 8.dp),
                            contentAlignment = Alignment.Center
                        ) {
                            Text(
                                text      = text,
                                color     = Color.Black,
                                fontSize  = 12.sp,
                                textAlign = TextAlign.Center
                            )
                        }
                    }
                }
            }
        }
    }
}


@Composable
fun HeartTouchView1(
    letter: String?,
    descriptions: List<String>,
    modifier: Modifier = Modifier
) {
    // ÏÑ†ÌÉùÎêú Í∏ÄÏûêÍ∞Ä ÏóÜÏúºÎ©¥ Í∏∞Î≥∏ ÏïàÎÇ¥ UI
    if (letter == null) {
        Box(
            modifier = modifier
                .fillMaxWidth()
                .border(
                    width = 1.dp,
                    color = Color.LightGray,
                    shape = RoundedCornerShape(16.dp)
                )
                .padding(16.dp)
        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically
            ) {
                // Î∂ÑÌôç ÌïòÌä∏
                Image(
                    painter = painterResource(id = R.drawable.touch),
                    contentDescription = "Touch Icon",
                    modifier = Modifier.size(40.dp)
                )

                Spacer(modifier = Modifier.width(12.dp)) // ÌïòÌä∏ÏôÄ ÌÖçÏä§Ìä∏ Í∞ÑÍ≤©

                // 2. ÌÖçÏä§Ìä∏ Ïª¨Îüº
                Column {
                    Row(
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Text(
                            text = "ÎßàÏùåÌÑ∞Ïπò",
                            fontSize = 15.sp,
                            fontWeight = FontWeight.Bold,
                            color = Color.White,
                            modifier = Modifier
                                .background(
                                    color = Color(0xFFFF6F91), // ÏßÑÌïú Î∂ÑÌôçÏÉâ
                                    shape = RoundedCornerShape(8.dp)
                                )
                                .padding(horizontal = 8.dp, vertical = 4.dp)
                        )
                        Spacer(modifier = Modifier.width(4.dp)) // ÎßàÏùåÌÑ∞ÏπòÏôÄ Î¨∏Ïû• ÏÇ¨Ïù¥ Í∞ÑÍ≤©
                        Text(
                            text = "Îäî ÏàòÏóÖÏãúÍ∞ÑÏóê ÏÑ†ÏÉùÎãòÍ≥º",
                            fontSize = 13.sp,
                            fontWeight = FontWeight.Normal,
                            color = Color.Black
                        )
                    }
                    Spacer(modifier = Modifier.height(4.dp)) // ÏúÑ-ÏïÑÎûò Ï§Ñ Í∞ÑÍ≤©
                    Text(
                        text = "Ìï®Íªò Ï∞∏Ïó¨ÌïòÎäî Í≥µÍ∞ÑÏù¥ÏóêÏöî.",
                        fontSize = 13.sp,
                        fontWeight = FontWeight.Normal,
                        color = Color.Black
                    )
                }
            }
        }
    } else {
        Column(
            modifier = modifier
                .fillMaxWidth()
                .background(Color(0xFFFFEBEE), RoundedCornerShape(12.dp))
                .padding(16.dp)
        ) {
            // 1) Î∂ÑÌôç ÌïòÌä∏ + ÏÑ†ÌÉùÎêú Í∏ÄÏûê & Ïö∞Ï∏° ÏÑ§Î™Ö
            Row(
                verticalAlignment = Alignment.CenterVertically,
                modifier = Modifier.fillMaxWidth()
            ) {
                // Î∂ÑÌôç ÌïòÌä∏ + Í∏ÄÏûê
                Box(
                    modifier = Modifier.size(72.dp),
                    contentAlignment = Alignment.Center
                ) {
                    Icon(
                        imageVector = Icons.Default.Favorite,
                        contentDescription = null,
                        tint = Color(0xFFFFC0CB),
                        modifier = Modifier.fillMaxSize()
                    )
                    Text(
                        text = letter,
                        color = Color.White,
                        fontSize = 32.sp,
                        fontWeight = FontWeight.Bold
                    )
                }

                Spacer(modifier = Modifier.width(16.dp))

//                if (letter=="H"){
//                    var text = "Ïù¥Î≤à ÌôúÎèôÏóêÏÑúÎäî ÎßàÏùåÏùÑ ÏïåÏïÑÎ≥¥Í≥†, ÎÇ¥ Í∏∞Î∂ÑÏùÑ ÏïåÏïÑÎ≥º Ïàò ÏûàÏñ¥ Ï¢ãÏùÄ ÏπúÍµ¨Îì§ Í¥ÄÍ≥ÑÎ•º ÎßåÎì§Ïñ¥ Í∞à Ïàò ÏûàÏñ¥Ïöî",
//                }
                // Ïö∞Ï∏°Ïóê Ï∂îÍ∞ÄÎêú ÏÑ§Î™Ö ÌÖçÏä§Ìä∏
                Text(
                    text = "Ïù¥Î≤à ÌôúÎèôÏóêÏÑúÎäî ÎßàÏùåÏùÑ ÏïåÏïÑÎ≥¥Í≥†, ÎÇ¥ Í∏∞Î∂ÑÏùÑ ÏïåÏïÑÎ≥º Ïàò ÏûàÏñ¥ Ï¢ãÏùÄ ÏπúÍµ¨Îì§ Í¥ÄÍ≥ÑÎ•º ÎßåÎì§Ïñ¥ Í∞à Ïàò ÏûàÏñ¥Ïöî",
                    fontSize = 13.sp,
                    color = Color.Black,
                    modifier = Modifier.weight(1f)
                )
            }
        }
    }
}
