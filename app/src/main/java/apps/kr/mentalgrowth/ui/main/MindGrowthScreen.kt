package apps.kr.mentalgrowth.ui.main

import android.content.Context
import android.os.Build
import android.util.Log
import androidx.annotation.RequiresApi
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.interaction.MutableInteractionSource
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.BoxWithConstraints
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.Row

import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.aspectRatio
import androidx.compose.foundation.layout.fillMaxHeight
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.Button
import androidx.compose.material.ButtonDefaults
import androidx.compose.material.Divider
import androidx.compose.material.ExperimentalMaterialApi
import androidx.compose.material.Icon
import androidx.compose.material.IconButton
import androidx.compose.material.MaterialTheme
import androidx.compose.material.ModalBottomSheetLayout
import androidx.compose.material.ModalBottomSheetValue
import androidx.compose.material.OutlinedButton
import androidx.compose.material.Scaffold
import androidx.compose.material.Surface
import androidx.compose.material.Text
import androidx.compose.material.TopAppBar
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Close
import androidx.compose.material.icons.filled.Home
import androidx.compose.material.rememberModalBottomSheetState
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.window.Dialog
import androidx.compose.ui.zIndex
import androidx.navigation.NavController
import apps.kr.mentalgrowth.R
import androidx.lifecycle.viewmodel.compose.viewModel
import apps.kr.mentalgrowth.common.CommonUtil.convertToCalendarMap
import apps.kr.mentalgrowth.common.CommonView.TitleWithHearts
import apps.kr.mentalgrowth.model.ApiResponseModel
import apps.kr.mentalgrowth.network.NetworkClient
import apps.kr.mentalgrowth.ui.main.viewmodel.MainViewModel
import coil.compose.AsyncImage
import kotlinx.coroutines.launch
import java.time.LocalDate
import java.time.YearMonth
import java.time.format.DateTimeFormatter


@RequiresApi(Build.VERSION_CODES.O)
@OptIn(ExperimentalMaterialApi::class)
@Composable
fun MindGrowthScreen( navController: NavController? = null,
                     viewModel: MainViewModel = viewModel()) {

    val boardList by viewModel.getBoardList.collectAsState()
    val getNoticeList by viewModel.getNoticeList.collectAsState()
    val getBoardTitle by viewModel.getBoardTitle.collectAsState()

    val calendarRawData by viewModel.hearList.collectAsState() // Ïòà: List<HeartDay>
    val currentMonth = remember { mutableStateOf(YearMonth.now()) }

    val _myTeir by viewModel._myTeir.collectAsState()
    val _myLevel by viewModel._myLevel.collectAsState()

    val nickName = LocalContext.current
        .getSharedPreferences("my_preferences", Context.MODE_PRIVATE)
        .getString("mem_nick", "ÎãâÎÑ§ÏûÑ")!!

    val class_group_id = LocalContext.current
        .getSharedPreferences("my_preferences", Context.MODE_PRIVATE)
        .getString("class_group_id", "")!!

    val mem_id = LocalContext.current
        .getSharedPreferences("my_preferences", Context.MODE_PRIVATE)
        .getString("mem_id", "")!!


    LaunchedEffect(mem_id) {
        viewModel.getMyInfo(mem_id)
        viewModel.getBoardTouch("3", class_group_id,"",mem_id,"")
        viewModel.getBoardChal("4", class_group_id,"",mem_id,"")
        viewModel.getRankMy(mem_id)
        viewModel.getMemInfo(mem_id,class_group_id)
    }
    val groupList by viewModel.groupList.collectAsState()

    val mem_level = LocalContext.current
        .getSharedPreferences("my_preferences", Context.MODE_PRIVATE)
        .getString("mem_level", "")!!

    val bottomSheetState = rememberModalBottomSheetState(ModalBottomSheetValue.Hidden)
    val coroutineScope = rememberCoroutineScope()
    val memberList by viewModel.memList.collectAsState()

    var selectedMember by remember { mutableStateOf<ApiResponseModel.MemberInfo?>(null) }

    LaunchedEffect(Unit) {
        coroutineScope.launch {
            bottomSheetState.hide()
        }
    }

    LaunchedEffect(memberList) {
        if (selectedMember == null && memberList.isNotEmpty()) {
            selectedMember = memberList[0] // Ï¥àÍ∏∞ ÏÉÅÌÉú (Î≥∏Ïù∏ Ï†ïÎ≥¥)
        }
    }

    ModalBottomSheetLayout(
        sheetState = bottomSheetState,
        sheetContent = {
            if (bottomSheetState.isVisible) { // ‚úÖ Ï°∞Í±¥Î∂Ä Ïª¥Ìè¨ÏßÄÏÖòÏúºÎ°ú ÍπúÎπ°ÏûÑ Î∞©ÏßÄ
                RankingInfoScreen(onClose = {
                    coroutineScope.launch { bottomSheetState.hide() }
                })
            }
        },
        modifier = Modifier.zIndex(-1f) // ‚úÖ Î†àÏù¥ÏïÑÏõÉ Ï¥àÍ∏∞ ÍπúÎπ°ÏûÑ Î∞©ÏßÄÏö©
    ) {
        Scaffold(
            topBar = {
                TopAppBar(
                    backgroundColor = Color(0xFFF8BBD0),
                ) {
                    Box(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(56.dp), // Í∏∞Î≥∏ TopAppBar ÎÜíÏù¥
                        contentAlignment = Alignment.Center
                    ) {
                        // ‚úÖ Ï§ëÏïô ÌÉÄÏù¥ÌãÄ (ÌïòÌä∏ Ìè¨Ìï®)
                        TitleWithHearts("ÎßàÏùåÏÑ±Ïû•")

                        // üîπ ÏôºÏ™Ω: Îí§Î°úÍ∞ÄÍ∏∞ Î≤ÑÌäº
                        Row(
                            modifier = Modifier.align(Alignment.CenterStart),
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            IconButton(onClick = { navController?.popBackStack() }) {
                                Icon(
                                    painter = painterResource(id = R.drawable.ic_back_black),
                                    contentDescription = "Îí§Î°úÍ∞ÄÍ∏∞",
                                    modifier = Modifier.size(40.dp)
                                )
                            }
                        }

                        // üîπ Ïò§Î•∏Ï™Ω: Ìôà Î≤ÑÌäº
                        Row(
                            modifier = Modifier.align(Alignment.CenterEnd),
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            IconButton(onClick = {
                                navController?.navigate("home") {
                                    popUpTo(navController.graph.startDestinationId) { inclusive = true }
                                    launchSingleTop = true
                                }
                            }) {
                                Icon(
                                    imageVector = Icons.Default.Home,
                                    contentDescription = "ÌôàÏúºÎ°ú",
                                    modifier = Modifier.size(24.dp)
                                )
                            }
                        }
                    }
                }

            },

            content = { innerPadding ->
                Column(
                    Modifier
                        .fillMaxSize()
                        .verticalScroll(rememberScrollState())
                        .background(Color(0xFFFFF5F7))
                        .padding(innerPadding)
                        .padding(1.dp)
                ) {
                    Column(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(16.dp),
                        verticalArrangement = Arrangement.spacedBy(12.dp),
                        horizontalAlignment = Alignment.CenterHorizontally
                    ) {

                        if (mem_level =="LEV003"){
                            GroupDropdown(
                                groupList = groupList,
                                onSelected = {
                                    // ÏÑ†ÌÉùÎêú GroupInfo Ï≤òÎ¶¨
                                    Log.d("SelectedGroup", it.toString())
                                    selectedMember = it // ‚úÖ ÏÉÅÌÉúÏóê Ï†ÄÏû•
                                    var selId = it.mem_id
                                    viewModel.getMyInfo(selId)
                                    viewModel.getBoardTouch("3", class_group_id,"",selId,"")
                                    viewModel.getBoardChal("4", class_group_id,"",selId,"")
                                    viewModel.getRankMy(selId)

                                }
                            )
                        }

                        if (memberList.isNotEmpty()) {
                            if (selectedMember != null) {
                                ProfileScreen(
                                    member = selectedMember!!, // Ïù¥Í±¥ ÏïàÏ†ÑÌï®. ÏúÑÏóêÏÑú null Ï≤¥ÌÅ¨Ìï®
                                    boardList = boardList,
                                    getNoticeList = getNoticeList,
                                    navController = navController,
                                    _myTeir = _myTeir,
                                    _myLevel = _myLevel,
                                    onShowRankingInfo = {
                                        coroutineScope.launch { bottomSheetState.show() }
                                    }
                                )
                            } else {
                                // Î°úÎî© Ï§ë Ï≤òÎ¶¨ ÎòêÎäî Îπà ÌôîÎ©¥ ÌëúÏãú
                                Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                                    Text("ÌïôÏÉù Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§Îäî Ï§ëÏûÖÎãàÎã§...", color = Color.Gray)
                                }
                            }
                        }


                    }


                }
            }
        )
    }




}


@RequiresApi(Build.VERSION_CODES.O)
@Composable
fun ProfileScreen(
    member: ApiResponseModel.MemberInfo,
    boardList: List<ApiResponseModel.Board>,
    getNoticeList: List<ApiResponseModel.Board>,
    navController: NavController?,
    _myTeir: String,
    _myLevel: String, onShowRankingInfo: () -> Unit,viewModel: MainViewModel = viewModel()
) {

    var currentMonth by remember { mutableStateOf(YearMonth.now()) }
    val calendarRawData by viewModel.hearList.collectAsState()
    val mem_id = member.mem_id

// convertToCalendarMap(): ÏïûÏÑú ÏÑ§Î™ÖÌïú Ìï®Ïàò
    val calendarData = remember(calendarRawData, currentMonth) {
        convertToCalendarMap(calendarRawData, currentMonth)
    }


    val tabs = listOf("ÎÇòÏùò ÌôúÎèô", "Ï∫òÎ¶∞Îçî", "Ï±åÎ¶∞ÏßÄ", "Îû≠ÌÇπ")
    var selectedTab by remember { mutableStateOf("ÎÇòÏùò ÌôúÎèô") }

// API ÏöîÏ≤≠
    LaunchedEffect(currentMonth,mem_id) {
        val year = currentMonth.year.toString()
        val month = "%02d".format(currentMonth.monthValue)
        viewModel.getCal(mem_id, year, month)
    }

    Column(
        modifier = Modifier
            .fillMaxSize()

    ) {
        // ÌîÑÎ°úÌïÑ ÏòÅÏó≠
        Column(  modifier = Modifier.fillMaxWidth(),horizontalAlignment = Alignment.CenterHorizontally) {
            val imageUrl = member.mem_img?.takeIf { it.isNotBlank() }?.let {
                NetworkClient.BASE_URL_MEMBER + it
            }

            AsyncImage(
                model = imageUrl ?: R.drawable.thumbnail_no_img1,
                contentDescription = "ÌîÑÎ°úÌïÑ Ïù¥ÎØ∏ÏßÄ",
                contentScale = ContentScale.Crop,
                modifier = Modifier
                    .size(72.dp)
                    .clip(CircleShape)
            )

            Spacer(modifier = Modifier.height(4.dp))
            val shortSchool = member.school.substringBefore("Ï¥à") + "Ï¥à"
            Text("${member.mem_phone} (${shortSchool})", fontWeight = FontWeight.Bold, fontSize = 18.sp)

            Spacer(modifier = Modifier.height(4.dp))
            Text("ÎÇòÏùò Í∏Ä: ${member.board_cnt?:"0"}Í∞ú   ÎÇòÏùò ÎåìÍ∏Ä: ${member.comment_cnt?:"0"}Í∞ú", fontSize = 13.sp, color = Color.Gray)

            Spacer(modifier = Modifier.height(4.dp))
            OutlinedButton(onClick = { navController?.navigate("profile") }, shape = RoundedCornerShape(50)) {
                Text("ÌîÑÎ°úÌïÑ ÏàòÏ†ï",  style = MaterialTheme.typography.body2)
            }
        }

        Spacer(modifier = Modifier.height(16.dp))

        // ÌÉ≠ Î©îÎâ¥
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceEvenly
        ) {
            tabs.forEach { tab ->
                Button(
                    onClick = { selectedTab = tab },
                    colors = ButtonDefaults.buttonColors(
                        backgroundColor = if (selectedTab == tab) Color(0xFFFFB6C1) else Color.White
                    ),
                    shape = RoundedCornerShape(16.dp),
                    contentPadding = PaddingValues(horizontal = 16.dp, vertical = 6.dp)
                ) {
                    Text(tab,   style = MaterialTheme.typography.body2, color = if (selectedTab == tab) Color.White else Color.Black)
                }
            }
        }

        Spacer(modifier = Modifier.height(12.dp))

        when (selectedTab) {
            "ÎÇòÏùò ÌôúÎèô" -> {
                MyActivityView(boardList,navController)
            }
            "Ï∫òÎ¶∞Îçî" -> {


                HeartCalendarView(
                    currentMonth = currentMonth,
                    calendarData = calendarData,
                    onPrevClick = { currentMonth = currentMonth.minusMonths(1) },
                    onNextClick = { currentMonth = currentMonth.plusMonths(1) }
                )



            }
            "Ï±åÎ¶∞ÏßÄ" -> {
                MyChallengeView(getNoticeList,   navController)
            }
            "Îû≠ÌÇπ" -> {
                 ChallengeTierAndCommentLevel(_myTeir,_myLevel,onShowRankingInfo)
            }
        }
    }
}

@Composable
fun MyActivityView(boardList: List<ApiResponseModel.Board>, navController: NavController?) {
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .background(Color.White, shape = RoundedCornerShape(12.dp))
            .padding(12.dp)
    ) {

        boardList.forEach { board ->
            Text(
                text = board.title ?: "(Ï†úÎ™© ÏóÜÏùå)",
                fontSize = 13.sp,
                modifier = Modifier
                    .fillMaxWidth()
                    .clickable {
                        val idx = board.idx ?: return@clickable
                        navController?.navigate("board_detail_touch/touch/${idx}")
                    }
                    .padding(vertical = 8.dp)
            )

            Divider(color = Color(0xFFFFDDE3), thickness = 1.dp)
        }
    }
}


@Composable
fun MyChallengeView(items: List<ApiResponseModel.Board>, navController: NavController?) {
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .background(Color.White, shape = RoundedCornerShape(12.dp))
            .padding(12.dp)
    ) {

        items.take(5).chunked(2).forEach { rowItems ->
            Row(
                horizontalArrangement = Arrangement.spacedBy(12.dp),
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 8.dp)
            ) {
                rowItems.forEach { item ->
                    Box(
                        modifier = Modifier
                            .weight(1f)
                            .aspectRatio(1f)
                            .clip(RoundedCornerShape(12.dp))
                            .background(Color(0xfffee3ea))
                            .clickable {
                                navController?.navigate("board_detail_chal/touch/${item.idx}")
//                                if (item == null) {
//                                    navController?.navigate("board_reg_pic/${class_group_id}?idx=")
//
//                                } else {
//                                    navController?.navigate("board_detail_picture/touch/${item.idx}")
//                                }
                            },
                        contentAlignment = Alignment.Center
                    ) {
                        if (item == null) {
                            Icon(
                                painter = painterResource(id = R.drawable.plus2),
                                contentDescription = "Îì±Î°ùÌïòÍ∏∞",
                                tint = Color.White,
                                modifier = Modifier.size(32.dp)
                            )
                        } else {
                            Column(
                                horizontalAlignment = Alignment.CenterHorizontally,
                                verticalArrangement = Arrangement.Center,
                                modifier = Modifier.padding(2.dp)
                            ) {
                                val imageUrl = item.filename?.takeIf { it.isNotBlank() }?.let {
                                    NetworkClient.BASE_URL_UPLOAD + it
                                }

                                if (imageUrl != null) {
                                    AsyncImage(
                                        model = imageUrl,
                                        contentDescription = "Í≤åÏãúÍ∏Ä Ïù¥ÎØ∏ÏßÄ",
                                        contentScale = ContentScale.FillBounds,
                                        modifier = Modifier
                                            .fillMaxSize()
                                            .padding(8.dp)
                                            .clip(RoundedCornerShape(8.dp))
                                    )
                                } else {
                                    // fallback: Ïù¥ÎØ∏ÏßÄ ÏóÜÏùÑ Í≤ΩÏö∞ ÌÖçÏä§Ìä∏ Ï∂úÎ†•
                                    Column(
                                        horizontalAlignment = Alignment.CenterHorizontally,
                                        verticalArrangement = Arrangement.Center,
                                        modifier = Modifier.padding(12.dp)
                                    ) {
                                        Text(
                                            text = "Ïù¥ÎØ∏ÏßÄ ÏóÜÏùå",
                                            fontSize = 14.sp,
                                            color = Color.Black
                                        )
                                    }
                                }
                            }
                        }
                    }
                }

                // Ïó¥Ïù¥ 3Í∞ú Ïïà Îê† Îïå Îπà Í≥µÍ∞Ñ Ï∂îÍ∞Ä
                repeat(2 - rowItems.size) {
                    Spacer(modifier = Modifier.weight(1f))
                }
            }
        }
    }
}

@Composable
fun TierImage(_myTeir: String) {
    // Îß§Ïπ≠ÎêòÎäî Î¶¨ÏÜåÏä§Í∞Ä ÏóÜÏúºÎ©¥ null
    val imageRes: Int? = when (_myTeir) {
        "Î∏åÎ°†Ï¶à ÌïòÌä∏"    -> R.drawable.bronze
        "Ïã§Î≤Ñ ÌïòÌä∏"     -> R.drawable.silver
        "Í≥®Îìú ÌïòÌä∏"     -> R.drawable.gold
        "ÌîåÎûòÌã∞ÎÑò ÌïòÌä∏" -> R.drawable.plt
        "Îã§Ïù¥ÏïÑ ÌïòÌä∏"   -> R.drawable.diamond1
        else             -> null
    }

    imageRes?.let { res ->
        Image(
            painter = painterResource(id = res),
            contentDescription = _myTeir,
            modifier = Modifier.size(18.dp)  // ÏõêÌïòÎäî ÌÅ¨Í∏∞Î°ú Ï°∞Ï†à
        )
    }
}

@OptIn(ExperimentalMaterialApi::class)
@Composable
fun ChallengeTierAndCommentLevel(_myTeir: String, _myLevel: String,  onShowRankingInfo: () -> Unit) {
    val (imageRes, tierLabel) = when (_myTeir) {
        "Î∏åÎ°†Ï¶à ÌïòÌä∏" -> R.drawable.bronze to "Î∏åÎ°†Ï¶à ÌïòÌä∏"
        "Ïã§Î≤Ñ ÌïòÌä∏" -> R.drawable.silver to "Ïã§Î≤Ñ ÌïòÌä∏"
        "Í≥®Îìú ÌïòÌä∏" -> R.drawable.gold to "Í≥®Îìú ÌïòÌä∏"
        "ÌîåÎûòÌã∞ÎÑò ÌïòÌä∏" -> R.drawable.plt to "ÌîåÎûòÌã∞ÎÑò ÌïòÌä∏"
        "Îã§Ïù¥ÏïÑ ÌïòÌä∏" -> R.drawable.diamond1 to "Îã§Ïù¥ÏïÑ ÌïòÌä∏"
        else -> R.drawable.bronze to "ÏóÜÏùå"
    }

    val (imageRess, levelLabel) = when (_myLevel) {
        "Î†àÎ≤® 1" -> R.drawable.lv01 to "Î†àÎ≤® 1"
        "Î†àÎ≤® 2" -> R.drawable.lv02 to "Î†àÎ≤® 2"
        "Î†àÎ≤® 3" -> R.drawable.lv03 to "Î†àÎ≤® 3"
        "Î†àÎ≤® 4" -> R.drawable.lv04 to "Î†àÎ≤® 4"
        "Î†àÎ≤® 5" -> R.drawable.lv05 to "Î†àÎ≤® 5"
        else -> R.drawable.lv01 to "ÏóÜÏùå"
    }


        Column(
            modifier = Modifier
                .fillMaxWidth()
                .background(Color.White)
                .padding(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            // ÏÉÅÎã® ÏïàÎÇ¥ Î¨∏Íµ¨
            Text(
                text = "ÎßàÏùå Ï±åÎ¶∞ÏßÄ Ï∞∏Ïó¨Ïóê Îî∞Î•∏ Ìã∞Ïñ¥ÏôÄ\nÎÇòÏùò ÎåìÍ∏Ä Ï∞∏Ïó¨Ïóê Îî∞Î•∏ Î†àÎ≤®ÏùÑ ÌôïÏù∏Ìï† Ïàò ÏûàÏñ¥Ïöî!",
                fontSize = 15.sp,
                fontWeight = FontWeight.Medium,
                textAlign = TextAlign.Center
            )

            Spacer(modifier = Modifier.height(24.dp))

            // Ìã∞Ïñ¥ & Î†àÎ≤® Ïπ¥Îìú
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceEvenly
            ) {
                // Ï±åÎ¶∞ÏßÄ Ìã∞Ïñ¥ Ïπ¥Îìú
                Column(horizontalAlignment = Alignment.CenterHorizontally) {
                    Box(
                        modifier = Modifier
                            .size(100.dp)
                            .background(Color(0xFFFFF5CC), shape = RoundedCornerShape(20.dp))
                            .padding(12.dp),
                        contentAlignment = Alignment.Center
                    ) {
                        Image(
                            painter = painterResource(id = imageRes),
                            contentDescription = tierLabel,
                            modifier = Modifier.size(60.dp)
                        )
                    }
                    Spacer(modifier = Modifier.height(8.dp))
                    Text(tierLabel, fontWeight = FontWeight.Bold)
                    Text("Ï±åÎ¶∞ÏßÄ Ìã∞Ïñ¥", fontSize = 13.sp, color = Color.Gray)
                }

                // ÎåìÍ∏Ä Î†àÎ≤® Ïπ¥Îìú
                Column(horizontalAlignment = Alignment.CenterHorizontally) {
                    Box(
                        modifier = Modifier
                            .size(100.dp)
                            .background(Color(0xFFE0F7FA), shape = RoundedCornerShape(20.dp))
                            .padding(12.dp),
                        contentAlignment = Alignment.Center
                    ) {
                        Image(
                            painter = painterResource(id = imageRess),
                            contentDescription = levelLabel,
                            modifier = Modifier.size(60.dp)
                        )
                    }
                    Spacer(modifier = Modifier.height(8.dp))
                    Text(levelLabel, fontWeight = FontWeight.Bold)
                    Text("ÎåìÍ∏Ä Î†àÎ≤®", fontSize = 13.sp, color = Color.Gray)
                }
            }

            Spacer(modifier = Modifier.height(24.dp))

            // ÌïòÎã® Î≤ÑÌäº ÎòêÎäî ÏïàÎÇ¥
            // ÌïòÎã® Î≤ÑÌäº ÎòêÎäî ÏïàÎÇ¥ - ÌÅ¥Î¶≠ Ïãú Dialog Ïó¥Í∏∞
            Box(
                modifier = Modifier
                    .clickable {   onShowRankingInfo()  }
                    .background(Color(0xFFFFEBEE), shape = RoundedCornerShape(12.dp))
                    .padding(horizontal = 12.dp, vertical = 6.dp)
            ) {
                Text(
                    "Ìã∞Ïñ¥ Î∞è Î†àÎ≤® Í∏∞Ï§Ä",
                    fontSize = 13.sp,
                    fontWeight = FontWeight.SemiBold,
                    color = Color.Red
                )
            }
        }


}


@Composable
fun RankingInfoScreen(onClose: () -> Unit = {}) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFFFFF0F5))
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Spacer(modifier = Modifier.height(16.dp))

        Box(
            modifier = Modifier
                .fillMaxWidth()
                .background(Color.White, RoundedCornerShape(16.dp))
                .border(2.dp, Color(0xFFFFB6C1), RoundedCornerShape(16.dp))
                .padding(16.dp)
        ) {
            Column {
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.End
                ) {
                    IconButton(onClick = onClose) {
                        Icon(Icons.Default.Close, contentDescription = "Îã´Í∏∞")
                    }
                }

                Row(modifier = Modifier.fillMaxWidth()) {
                    // ÏôºÏ™Ω: Ï±åÎ¶∞ÏßÄ Ìã∞Ïñ¥
                    Column(modifier = Modifier.weight(1f)) {
                        Text("ÎßàÏùå Ï±åÎ¶∞ÏßÄ Ìã∞Ïñ¥ Í∏∞Ï§Ä", fontWeight = FontWeight.Bold, color = Color(0xFFE91E63))
                        Spacer(modifier = Modifier.height(8.dp))

                        val tierList = listOf(
                            "Ï±åÎ¶∞ÏßÄ 1~2Í∞ú" to R.drawable.bronze,
                            "Ï±åÎ¶∞ÏßÄ 3~5Í∞ú" to R.drawable.silver,
                            "Ï±åÎ¶∞ÏßÄ 6~9Í∞ú" to R.drawable.gold,
                            "Ï±åÎ¶∞ÏßÄ 10~14Í∞ú" to R.drawable.plt,
                            "Ï±åÎ¶∞ÏßÄ 15Í∞ú Ïù¥ÏÉÅ" to R.drawable.diamond1
                        )

                        tierList.forEach { (label, imageRes) ->
                            Row(verticalAlignment = Alignment.CenterVertically) {
                                Image(
                                    painter = painterResource(id = imageRes),
                                    contentDescription = label,
                                    modifier = Modifier.size(24.dp)
                                )
                                Spacer(modifier = Modifier.width(8.dp))
                                Text(label, fontSize = 13.sp)
                            }
                            Spacer(modifier = Modifier.height(6.dp))
                        }
                    }

                    Spacer(modifier = Modifier.width(12.dp))

                    // Ïò§Î•∏Ï™Ω: ÎåìÍ∏Ä Î†àÎ≤®
                    Column(modifier = Modifier.weight(1f)) {
                        Text("ÎåìÍ∏Ä Î†àÎ≤® Í∏∞Ï§Ä", fontWeight = FontWeight.Bold, color = Color(0xFFFF9800))
                        Spacer(modifier = Modifier.height(8.dp))

                        val levelList = listOf(
                            "ÎåìÍ∏Ä 1~10Í∞ú" to R.drawable.lv01,
                            "ÎåìÍ∏Ä 11~30Í∞ú" to R.drawable.lv02,
                            "ÎåìÍ∏Ä 31~60Í∞ú" to R.drawable.lv03,
                            "ÎåìÍ∏Ä 61~99Í∞ú" to R.drawable.lv04,
                            "ÎåìÍ∏Ä 100Í∞ú Ïù¥ÏÉÅ" to R.drawable.lv05
                        )

                        levelList.forEach { (label, imageRes) ->
                            Row(verticalAlignment = Alignment.CenterVertically) {
                                Image(
                                    painter = painterResource(id = imageRes),
                                    contentDescription = label,
                                    modifier = Modifier.size(24.dp)
                                )
                                Spacer(modifier = Modifier.width(8.dp))
                                Text(label, fontSize = 13.sp)
                            }
                            Spacer(modifier = Modifier.height(6.dp))
                        }
                    }
                }
            }
        }
    }
}

enum class HeartType(val color: Color, val label: String) {
    ATTEND(Color(0xFFFF6B6B), "ÎßàÏùåÏ∂úÏÑù"),      // Îπ®Í∞ï
    TOUCH(Color(0xFFFFC107), "ÎßàÏùåÌÑ∞Ïπò"),      // Ï£ºÌô©
    CHALLENGE(Color(0xFF81C784), "ÎßàÏùåÏ±åÎ¶∞ÏßÄ"), // Ïó∞Îëê
    TALK(Color(0xFF64B5F6), "ÎßàÏùåÌÜ°ÌÜ°")         // ÌïòÎäò
}

@RequiresApi(Build.VERSION_CODES.O)
@Composable
fun HeartCalendarView(
    currentMonth: YearMonth,
    calendarData: Map<Int, List<HeartType>>,
    onPrevClick: () -> Unit,
    onNextClick: () -> Unit
) {
    val formatter = DateTimeFormatter.ofPattern("yyyyÎÖÑ MÏõî")
    val firstDay = currentMonth.atDay(1)
    val startDayOffset = (firstDay.dayOfWeek.value % 7) // ÏõîÏöîÏùº=1... ÏùºÏöîÏùº=7
    val daysInMonth = currentMonth.lengthOfMonth()

    Column(modifier = Modifier.fillMaxWidth().padding(12.dp)) {
        // ÏÉÅÎã®
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            IconButton(onClick = onPrevClick) {
                Text("‚óÄ")
            }
            Text(currentMonth.format(formatter), fontWeight = FontWeight.Bold, fontSize = 20.sp)
            IconButton(onClick = onNextClick) {
                Text("‚ñ∂")
            }
        }

        Spacer(modifier = Modifier.height(8.dp))

        // ÏöîÏùº Ìó§Îçî
        val daysOfWeek = listOf("Ïõî", "Ìôî", "Ïàò", "Î™©", "Í∏à", "ÌÜ†", "Ïùº")
        Row(Modifier.fillMaxWidth()) {
            daysOfWeek.forEach {
                Text(
                    it,
                    modifier = Modifier.weight(1f),
                    textAlign = TextAlign.Center,
                    fontWeight = FontWeight.SemiBold
                )
            }
        }

        Spacer(modifier = Modifier.height(8.dp))

        // ÎÇ†Ïßú Í∑∏Î¶¨Îìú
        val totalCells = startDayOffset + daysInMonth
        val rows = (totalCells + 6) / 7
        var day = 1

        Column {
            repeat(rows) {
                Row(Modifier.fillMaxWidth()) {
                    repeat(7) { col ->
                        val index = it * 7 + col
                        if (index < startDayOffset || day > daysInMonth) {
                            Box(modifier = Modifier.weight(1f).aspectRatio(1f))
                        } else {
                            DayCell(
                                day = day,
                                hearts = calendarData[day] ?: emptyList(),
                                modifier = Modifier.weight(1f)
                            )
                            day++
                        }
                    }
                }
            }
        }

        Spacer(modifier = Modifier.height(12.dp))

        // Î≤îÎ°Ä
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .background(Color(0xFFFFEBEE), shape = RoundedCornerShape(8.dp))
                .padding(8.dp),
            horizontalArrangement = Arrangement.SpaceEvenly
        ) {
            HeartType.values().forEach { type ->
                Row(verticalAlignment = Alignment.CenterVertically) {
                    Box(
                        modifier = Modifier
                            .size(12.dp)
                            .background(type.color, CircleShape)
                    )
                    Spacer(modifier = Modifier.width(4.dp))
                    Text(type.label, fontSize = 12.sp)
                }
            }
        }
    }
}

@Composable
fun DayCell(day: Int, hearts: List<HeartType>, modifier: Modifier = Modifier) {
    Column(
        modifier = modifier
            .aspectRatio(1f)
            .padding(2.dp)
            .border(0.5.dp, Color.LightGray),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(day.toString(), fontSize = 10.sp, color = Color.Black)
        Spacer(modifier = Modifier.height(4.dp))

        val grid = hearts.take(4).chunked(2)

        Column(
            verticalArrangement = Arrangement.spacedBy(2.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            grid.forEach { row ->
                Row(horizontalArrangement = Arrangement.spacedBy(2.dp)) {
                    row.forEach { heart ->
                        Box(
                            modifier = Modifier
                                .size(10.dp)
                                .background(heart.color, shape = CircleShape)
                        )
                    }
                    repeat(2 - row.size) {
                        Spacer(modifier = Modifier.size(10.dp))
                    }
                }
            }
        }
    }
}

