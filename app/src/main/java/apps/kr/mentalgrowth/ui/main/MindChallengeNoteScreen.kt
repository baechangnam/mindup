package apps.kr.mentalgrowth.ui.main

import android.content.Context
import android.util.Log
import android.widget.Toast
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.gestures.detectTapGestures
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.aspectRatio
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.heightIn
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.AlertDialog
import androidx.compose.material.Button
import androidx.compose.material.ButtonDefaults
import androidx.compose.material.Card
import androidx.compose.material.Icon
import androidx.compose.material.IconButton
import androidx.compose.material.MaterialTheme
import androidx.compose.material.Scaffold
import androidx.compose.material.Surface
import androidx.compose.material.Text
import androidx.compose.material.TextButton
import androidx.compose.material.TextField
import androidx.compose.material.TopAppBar
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.AccountCircle
import androidx.compose.material.icons.filled.Favorite
import androidx.compose.material.icons.filled.Home
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateMapOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.focus.onFocusChanged
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.painter.Painter
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import apps.kr.mentalgrowth.R
import androidx.lifecycle.viewmodel.compose.viewModel
import apps.kr.mentalgrowth.common.CommonView.TitleWithHearts
import apps.kr.mentalgrowth.model.ApiResponseModel
import apps.kr.mentalgrowth.network.NetworkClient
import apps.kr.mentalgrowth.network.NetworkClient.apiService
import apps.kr.mentalgrowth.ui.main.viewmodel.MainViewModel
import coil.compose.AsyncImage
import kotlinx.coroutines.launch
import java.time.format.TextStyle

//import apps.kr.mentalgrowth.ui.main.viewmodel.GolfCourseListViewModel

@Composable
fun MindChallengeNoteScreen( navController: NavController? = null,
                     viewModel: MainViewModel = viewModel()) {

    val boardList by viewModel.getBoardList.collectAsState()
    val boardVideoList by viewModel.getBoardVideo.collectAsState()
    val getBoardTitle by viewModel.getBoardTitle.collectAsState()
    val memberList by viewModel.memList.collectAsState()

    val nickName = LocalContext.current
        .getSharedPreferences("my_preferences", Context.MODE_PRIVATE)
        .getString("mem_nick", "ÎãâÎÑ§ÏûÑ")!!

    val class_group_id = LocalContext.current
        .getSharedPreferences("my_preferences", Context.MODE_PRIVATE)
        .getString("class_group_id", "")!!

    val mem_id = LocalContext.current
        .getSharedPreferences("my_preferences", Context.MODE_PRIVATE)
        .getString("mem_id", "")!!

    // ‚ë† ÏÑ†ÌÉùÎêú Í∏ÄÏûê ÏÉÅÌÉú
    var selectedLetter by remember { mutableStateOf<String?>(null) }

    // heartData Ïû¨ÏÇ¨Ïö©ÏùÑ ÏúÑÌï¥ Îî∞Î°ú Ï†ïÏùò
    val heartData = mapOf(
        "H" to listOf("ÎßàÏùå ÏùºÍ∏∞", "ÎßàÏùå Ïª¨Îü¨ÎßÅ"),
        "E" to listOf("ÎßàÏùå Î∏åÏù¥Î°úÍ∑∏", "ÎßàÏùå ÎπÑÌÉÄÎØº"),
        "A" to listOf("ÎßàÏùå ÏïΩÍµ≠", "ÎßàÏùå ÏïåÎûå"),
        "R" to listOf("1Ïùº 1Ïã¨", "ÎßàÏùå ÌûàÏñ¥Î°ú"),
        "T" to listOf("ÎßàÏùå ÌÖåÎùºÌîº", "ÎßàÏùå Îã§Ïù¥Ïñ¥Ìä∏")
    )

    LaunchedEffect(class_group_id) {
        viewModel.getBoardTouch("4", class_group_id,"",mem_id,"note")

    }

    val descriptions = listOf("ÏïåÏïÑÎ¥êÏöî", "Ï°∞Ï†àÌï¥Ïöî", "ÏÜåÌÜµÌï¥Ïöî", "Ìï®ÍªòÌï¥Ïöî", "Í±¥Í∞ïÌï¥Ïöî")

    Scaffold(
        topBar = {
            // ‚îÄ‚îÄ‚îÄ ÏÉÅÎã® AppBar ÏòÅÏó≠ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            TopAppBar(
                backgroundColor = Color(0xFFF8BBD0),
            ) {
                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(56.dp), // Í∏∞Î≥∏ TopAppBar ÎÜíÏù¥
                    contentAlignment = Alignment.Center
                ) {
                    // ‚úÖ Ï§ëÏïô ÌÉÄÏù¥ÌãÄ (ÌïòÌä∏ Ìè¨Ìï®)
                    TitleWithHearts("ÏÑ±Ïû•ÎÖ∏Ìä∏")

                    // üîπ ÏôºÏ™Ω: Îí§Î°úÍ∞ÄÍ∏∞ Î≤ÑÌäº
                    Row(
                        modifier = Modifier.align(Alignment.CenterStart),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        IconButton(onClick = { navController?.popBackStack() }) {
                            Icon(
                                painter = painterResource(id = R.drawable.ic_back_black),
                                contentDescription = "Îí§Î°úÍ∞ÄÍ∏∞",
                                modifier = Modifier.size(40.dp)
                            )
                        }
                    }

                    // üîπ Ïò§Î•∏Ï™Ω: Ìôà Î≤ÑÌäº
                    Row(
                        modifier = Modifier.align(Alignment.CenterEnd),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        IconButton(onClick = {
                            navController?.navigate("home") {
                                popUpTo(navController.graph.startDestinationId) { inclusive = true }
                                launchSingleTop = true
                            }
                        }) {
                            Icon(
                                imageVector = Icons.Default.Home,
                                contentDescription = "ÌôàÏúºÎ°ú",
                                modifier = Modifier.size(24.dp)
                            )
                        }
                    }
                }
            }
        },

        content = { innerPadding ->
            Column(
                Modifier
                    .fillMaxSize()
                    .verticalScroll(rememberScrollState())
                    .padding(innerPadding)
                    .padding(16.dp)
            ) {
                Spacer(Modifier.height(24.dp))

                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .border(
                            width = 1.dp,
                            color = Color.LightGray,
                            shape = RoundedCornerShape(16.dp)
                        )
                        .padding(16.dp)
                ) {
                    Row(
                        verticalAlignment = Alignment.CenterVertically

                    ) {
                        Spacer(modifier = Modifier.width(12.dp)) // ÌïòÌä∏ÏôÄ ÌÖçÏä§Ìä∏ Í∞ÑÍ≤©
                        // Î∂ÑÌôç ÌïòÌä∏
                        Image(
                            painter = painterResource(id = R.drawable.challenge),
                            contentDescription = "Touch Icon",
                            modifier = Modifier.size(40.dp)
                        )


                        Column(
                            modifier = Modifier
                                .fillMaxWidth(),

                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            Row(
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text(
                                    text = "ÏÑ±Ïû•ÎÖ∏Ìä∏",
                                    fontSize = 15.sp,
                                    fontWeight = FontWeight.Bold,
                                    color = Color.White,
                                    modifier = Modifier
                                        .background(
                                            color = Color(0xFFFF6F91), // ÏßÑÌïú Î∂ÑÌôçÏÉâ
                                            shape = RoundedCornerShape(8.dp)
                                        )
                                        .padding(horizontal = 8.dp, vertical = 4.dp)
                                )
                                Spacer(modifier = Modifier.width(4.dp)) // ÎßàÏùåÌÑ∞ÏπòÏôÄ Î¨∏Ïû• ÏÇ¨Ïù¥ Í∞ÑÍ≤©
                                Text(
                                    text = "Îäî Ïä§Ïä§Î°ú ÏÑ±Ïû•Ìïú Í≤∞Í≥ºÎ•º",
                                    fontSize = 13.sp,
                                    fontWeight = FontWeight.Normal,
                                    color = Color.Black
                                )
                            }
                            Spacer(modifier = Modifier.height(4.dp)) // ÏúÑ-ÏïÑÎûò Ï§Ñ Í∞ÑÍ≤©
                            Text(
                                text = "Ìïú Î¨∏Ïû•ÏúºÎ°ú Ï†ÅÏñ¥Î≥¥Îäî Í≥µÍ∞ÑÏù¥ÏóêÏöî",
                                fontSize = 13.sp,
                                fontWeight = FontWeight.Normal,
                                color = Color.Black
                            )

                        }
                    }

                }



                Spacer(Modifier.height(24.dp))

                HeartInfoTableD(
                    heartData = heartData,
                    selected = selectedLetter,
                    onSelect = { letter ->
                        selectedLetter = letter
                    }
                    , navController = navController,  boardList = boardList // Ï∂îÍ∞Ä
                )

                Spacer(modifier = Modifier.height(16.dp))





            }
        }
    )




}
@Composable
fun HeartInfoTableD(
    heartData: Map<String, List<String>>,
    selected: String?,
    onSelect: (String) -> Unit,
    navController: NavController?,
    boardList: List<ApiResponseModel.Board> = emptyList(),
    modifier: Modifier = Modifier
) {
    val lettersInOrder = listOf("H", "E", "A", "R", "T")
    val perGroupCount = heartData.values.firstOrNull()?.size ?: 2
    val mem_id = LocalContext.current
        .getSharedPreferences("my_preferences", Context.MODE_PRIVATE)
        .getString("mem_id", "")!!
    val activeCodes = remember(boardList) {
        boardList.mapNotNull { it.board_category_idx }.toSet()
    }

    // ‚úÖ Í∞Å Í∏ÄÏûêÎßàÎã§ ÏÉÅÌÉú Îî∞Î°ú Í¥ÄÎ¶¨ (ÏûÖÎ†•Í∞í)
    val inputMap = remember { mutableStateMapOf<String, String>() }
    var shortMemo by remember { mutableStateOf("H") }
    val class_group_id = LocalContext.current
        .getSharedPreferences("my_preferences", Context.MODE_PRIVATE)
        .getString("class_group_id", "")!!

    val idxMap = remember { mutableStateMapOf<String, Int>() }

    // ‚úÖ Ïó¨Í∏∞Ïóê ÏÑ†Ïñ∏Ìï©ÎãàÎã§!
    LaunchedEffect(boardList) {
        listOf("H", "E", "A", "R", "T").forEach { letter ->
            val matched = boardList.find { it.short_memo == letter }
            if (matched != null) {
                inputMap[letter] = matched.title ?: ""
                idxMap[letter] = matched.idx
            }
        }
    }
    val context = LocalContext.current

    var showDeleteDialogFor by remember { mutableStateOf<String?>(null) } // ÌòÑÏû¨ ÏÇ≠Ï†ú ÎåÄÏÉÅ letter
    val scope = rememberCoroutineScope()

    Column(modifier = modifier.fillMaxWidth()) {

        Spacer(modifier = Modifier.height(5.dp))

        heartData.forEach { (letter, items) ->
            if (selected == null || selected == letter) {
                val letterIndex = lettersInOrder.indexOf(letter)
                val codesForLetter = (0 until perGroupCount).map { idx ->
                    "CAL" + String.format("%03d", letterIndex * perGroupCount + idx + 1)
                }
                val context = LocalContext.current
                val isAllActive = codesForLetter.all { it in activeCodes }
                val hasInput = inputMap[letter]?.isNotBlank() == true

                Column(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(vertical = 8.dp, horizontal = 2.dp)
                ) {
                    // ‚úÖ ÏÉÅÎã® ÏïÑÏù¥ÏΩò + Î¨∏Ïûê (ÌÅ¥Î¶≠ Ïãú ÏÑ†ÌÉù)
                    Row(
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Box(
                            modifier = Modifier
                                .size(48.dp).clickable {
                                   // onSelect(letter)
                                    shortMemo = letter
                                },

                            contentAlignment = Alignment.Center
                        ) {
                            Icon(
                                imageVector = Icons.Default.Favorite,
                                contentDescription = null,
                                tint = if (hasInput) Color(0xFFFFC0CB) else Color(0xFFEBEBEB),
                                modifier = Modifier.fillMaxSize()
                            )
                            Text(
                                text = letter,
                                color = Color.Black,
                                fontSize = 20.sp,
                                fontWeight = FontWeight.Bold
                            )
                        }

                        Spacer(modifier = Modifier.width(12.dp))
                        var textFieldFocusState by remember { mutableStateOf(false) }
                        // ‚úÖ ÏûÖÎ†•Ï∞Ω + Îì±Î°ùÎ≤ÑÌäº
                        TextField(
                            value = inputMap[letter] ?: "",
                            onValueChange = { inputMap[letter] = it },
                            modifier = Modifier
                                .weight(1f)
                                .heightIn(min = 48.dp) // ÏµúÏÜå ÎÜíÏù¥ ÏÑ§Ï†ï
                                .padding(vertical = 4.dp).pointerInput(Unit) {
                                    detectTapGestures(
                                        onLongPress = {
                                            if (!inputMap[letter].isNullOrBlank()) {
                                                showDeleteDialogFor = letter
                                            }
                                        }
                                    )
                                }.onFocusChanged { focusState ->
                                    textFieldFocusState = focusState.isFocused
                                    if (focusState.isFocused) {
                                        shortMemo = letter
                                        // idxMap[letter]Îäî Í∑∏ÎåÄÎ°ú ÎëêÎêò, Ìè¨Ïª§Ïä§Îêú Í∏ÄÏûêÎ•º Í∏∞Ï§ÄÏúºÎ°ú ÏÑúÎ≤ÑÎ°ú Î≥¥ÎÇ¥Îäî shortMemoÎäî ÏóÖÎç∞Ïù¥Ìä∏
                                    }
                                }, // ÏúÑÏïÑÎûò Ïó¨Î∞± Ï∂ïÏÜå
                            placeholder = { Text("ÎÇ¥Ïö© ÏûÖÎ†•", fontSize = 12.sp) },
                            textStyle = androidx.compose.ui.text.TextStyle(
                                fontSize = 13.sp,
                                lineHeight = 16.sp
                            ),
                            singleLine = false,
                            maxLines = 4
                        )

                        Spacer(modifier = Modifier.width(8.dp))
                        val scope = rememberCoroutineScope()
                        Column(
                            verticalArrangement = Arrangement.spacedBy(4.dp),
                            horizontalAlignment = Alignment.End,
                            modifier = Modifier.padding(start = 8.dp)
                        ) {
                            Button(
                                onClick = {
                                    val input = inputMap[letter]
                                    val idx = idxMap[letter]
                                    scope.launch {
                                        try {
                                            val response = apiService.regNote(
                                                input ?: "",
                                                idx.toString(),
                                                mem_id,
                                                shortMemo,
                                                class_group_id
                                            )
                                            if (response.isSuccessful) {
                                                response.body()?.let { list ->
                                                    if (list.flag.flag == "1") {
                                                        Toast.makeText(context, "Îì±Î°ù ÏôÑÎ£å", Toast.LENGTH_SHORT).show()
                                                    }
                                                }
                                            }
                                        } catch (e: Exception) {
                                            Log.e("myLog", "Îì±Î°ù Ïò§Î•ò: $e")
                                        }
                                    }
                                },
                                modifier = Modifier
                                    .width(50.dp)
                                    .height(24.dp),
                                contentPadding = PaddingValues(0.dp)
                            ) {
                                Text("Îì±Î°ù", fontSize = 9.sp)
                            }

                            Button(
                                onClick = {
                                    if (!inputMap[letter].isNullOrBlank()) {
                                        showDeleteDialogFor = letter
                                    }
                                },
                                modifier = Modifier
                                    .width(50.dp)
                                    .height(24.dp),
                                contentPadding = PaddingValues(0.dp),
                                colors = ButtonDefaults.buttonColors(backgroundColor = Color.LightGray)
                            ) {
                                Text("ÏÇ≠Ï†ú", fontSize = 9.sp)
                            }
                        }
                    }
                }
            }

        }

        // ‚úÖ Î∞òÎìúÏãú Column ÎÇ¥Î∂ÄÏóê ÏúÑÏπòÌï¥Ïïº Ìï®!
        if (showDeleteDialogFor != null) {
            val targetLetter = showDeleteDialogFor!!
            val idx = idxMap[targetLetter]

            AlertDialog(
                onDismissRequest = { showDeleteDialogFor = null },
                title = { Text("ÏÇ≠Ï†ú ÌôïÏù∏") },
                text = { Text("Ï†ïÎßê ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?") },
                confirmButton = {
                    TextButton(onClick = {
                        scope.launch {
                            try {
                                if (idx != null) {
                                    val response = apiService.deleteBoard(idx.toString())
                                    if (response.isSuccessful) {
                                        inputMap[targetLetter] = ""
                                        idxMap.remove(targetLetter)
                                        Toast.makeText(context, "ÏÇ≠Ï†ú ÏôÑÎ£å", Toast.LENGTH_SHORT).show()
                                    }
                                }
                            } catch (e: Exception) {
                                Log.e("myLog", "ÏÇ≠Ï†ú Ïò§Î•ò: $e")
                            } finally {
                                showDeleteDialogFor = null
                            }
                        }
                    }) {
                        Text("ÌôïÏù∏")
                    }
                },
                dismissButton = {
                    TextButton(onClick = { showDeleteDialogFor = null }) {
                        Text("Ï∑®ÏÜå")
                    }
                }
            )
        }


    }

}


